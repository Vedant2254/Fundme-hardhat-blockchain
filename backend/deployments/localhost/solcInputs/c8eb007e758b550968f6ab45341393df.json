{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error Codes\nerror FundMe__NotOwner();\n\n/** @title A contract for crowdfunding\n *  @author Vedant Patil\n *  @notice This is a demo contract for funding\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MIN_USD = 50 * 1e18;\n    address private immutable i_owner;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToFunds;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address _priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    receive() external payable {\n        if (msg.value.getConversionRate(s_priceFeed) >= MIN_USD) {\n            fund();\n        }\n    }\n\n    fallback() external payable {}\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n            \"Didn't send enough ETH\"\n        );\n        if (s_addressToFunds[msg.sender] == 0) s_funders.push(msg.sender);\n        s_addressToFunds[msg.sender] = s_addressToFunds[msg.sender] + msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // creating memory address as it is lot more gas efficient than storage\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            s_addressToFunds[funders[i]] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(success, \"Failed to withdraw funds\");\n    }\n\n    // View / pure functions\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 idx) public view returns (address) {\n        return s_funders[idx];\n    }\n\n    function getAddressToFund(address funder) public view returns (uint256) {\n        return s_addressToFunds[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getLatestPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 eth,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 usdPerEth = getLatestPrice(priceFeed);\n        uint256 usd = (usdPerEth * eth) / 1e18;\n        return usd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}